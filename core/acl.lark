%import common.CNAME
%import common.DIGIT
%import common.NEWLINE
%import common.WS
%import common.WS_INLINE
%import common.SIGNED_NUMBER

STRING: /['"]?[A-Za-z0-9 ]+['"]?/

_IF: "if"i
_ELIF: "elif"i
_ELSE: "else"i
_END: "end"i
_QUEUE: "queue"i
_EOL: NEWLINE | ";"
AND: "and"i
OR: "or"i
NOT: "not"i
GT: ">" 
LT: "<" 
EQ: "="
GE: ">=" 
LE: "<="
NE: "!="
ADD: "+"
MINUS: "-" 
TIMES: "*"
DIVIDE: "/"
MOD: "%"

SEQ: "seq"i
X: "x"i
S: "s"i
CANCEL: "cancel"i
FSC: "fsc"i
PREP: "prep"i
DURATION: "duration"i
NOW: "now"i

_COMMENT: /#.*/

%ignore WS
%ignore _EOL
%ignore "`"

start: expr*

?expr: _COMMENT | control | actcond

control: ifelse | ifqueue
ifelse: _IF condition _EOL expr+ [_ELIF condition _EOL expr+] [_ELSE expr+] _END
ifqueue: _QUEUE [condition] actcond* _END
?actcond: action ["," condition]
action: function | CNAME

?condition: pincond
    | selfcond
    | "(" condition ")"
    | (NOT condition)
    | (condition _logic condition)
    | ((condition | literal) _operator (condition | literal))

selfcond: ["self."] (CNAME ".")* (CNAME | function | indice)
pincond: SEQ | X | S | FSC | CANCEL | PREP | DURATION | NOW
indice: CNAME "[" [literal] "]"
function: CNAME "(" [_args] ")"
_logic: AND | OR
_operator: GT | LT | EQ | GE | LE | NE | ADD | MINUS | TIMES | DIVIDE | MOD
_args: literal ("," literal)*
literal: SIGNED_NUMBER | STRING
